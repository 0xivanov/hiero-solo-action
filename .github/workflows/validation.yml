name: PR Validation

on:
  pull_request:
    branches:
      - main

jobs:
  validate-hedera-outputs:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Hedera Solo
        uses: ./
        id: solo

      - name: Set Script Permissions
        run: chmod +x ${GITHUB_WORKSPACE}/scripts/check-accounts.sh

      - name: ‚úÖ Validate Hedera Solo Outputs
        run: ${GITHUB_WORKSPACE}/scripts/check-accounts.sh
        env:
          ECDSA_ACCOUNT_ID: ${{ steps.solo.outputs.ecdsaAccountId }}
          ECDSA_PRIVATE_KEY: ${{ steps.solo.outputs.ecdsaPrivateKey }}
          ECDSA_PUBLIC_KEY: ${{ steps.solo.outputs.ecdsaPublicKey }}
          ED25519_ACCOUNT_ID: ${{ steps.solo.outputs.ed25519AccountId }}
          ED25519_PRIVATE_KEY: ${{ steps.solo.outputs.ed25519PrivateKey }}
          ED25519_PUBLIC_KEY: ${{ steps.solo.outputs.ed25519PublicKey }}

  validate-mirror-node:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Hedera Solo with MirrorNode
        uses: ./
        with:
          installMirrorNode: true
        id: solo

      - name: ‚úÖ Validate Mirror Node API
        run: |
          # Log Account details for both ECDSA and ED25519
          echo "ECDSA Account ID: $ECDSA_ACCOUNT_ID"
          echo "ECDSA Private Key: $ECDSA_PRIVATE_KEY"
          echo "ECDSA Public Key: $ECDSA_PUBLIC_KEY"

          echo "ED25519 Account ID: $ED25519_ACCOUNT_ID"
          echo "ED25519 Private Key: $ED25519_PRIVATE_KEY"
          echo "ED25519 Public Key: $ED25519_PUBLIC_KEY"

          # Wait for the mirror node to be fully up and running
          sleep 10

          RESPONSE=$(curl -s -w "%{http_code}" -X 'GET' 'http://localhost:8080/api/v1/network/nodes' -H 'accept: application/json' -o response.json)

          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå Error: API request failed with status code $RESPONSE"
            cat response.json
            exit 1
          else
            echo "‚úÖ API request successful"
            cat response.json
          fi
        env:
          ECDSA_ACCOUNT_ID: ${{ steps.solo.outputs.ecdsaAccountId }}
          ECDSA_PRIVATE_KEY: ${{ steps.solo.outputs.ecdsaPrivateKey }}
          ECDSA_PUBLIC_KEY: ${{ steps.solo.outputs.ecdsaPublicKey }}
          ED25519_ACCOUNT_ID: ${{ steps.solo.outputs.ed25519AccountId }}
          ED25519_PRIVATE_KEY: ${{ steps.solo.outputs.ed25519PrivateKey }}
          ED25519_PUBLIC_KEY: ${{ steps.solo.outputs.ed25519PublicKey }}

  validate-json-rpc-relay:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Hedera Solo with JSON-RPC Relay
        uses: ./
        with:
          installRelay: true
        id: solo

      - name: Set Script Permissions
        run: chmod +x ${GITHUB_WORKSPACE}/scripts/check-accounts.sh

      - name: ‚úÖ Validate JSON-RPC Relay
        run: |
          ${GITHUB_WORKSPACE}/scripts/check-accounts.sh

          echo "ECDSA Account ID: $ECDSA_ACCOUNT_ID"
          echo "ECDSA Private Key: $ECDSA_PRIVATE_KEY"
          echo "ECDSA Public Key: $ECDSA_PUBLIC_KEY"

          echo "ED25519 Account ID: $ED25519_ACCOUNT_ID"
          echo "ED25519 Private Key: $ED25519_PRIVATE_KEY"
          echo "ED25519 Public Key: $ED25519_PUBLIC_KEY"

          sleep 30
          RESPONSE=$(curl -s -w "%{http_code}" -X POST 'http://localhost:7546' \
            -H 'Content-Type: application/json' \
            -d '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' \
            -o response.json)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå Error: JSON-RPC request failed with status code $RESPONSE"
            echo "Response body:"
            cat response.json
            echo "Checking if relay service is running:"
            kubectl get pods -n solo | grep relay
            exit 1
          fi
          CHAIN_ID=$(jq -r '.result' response.json)
          if [ -z "$CHAIN_ID" ] || [ "$CHAIN_ID" = "null" ]; then
            echo "‚ùå Error: Invalid or missing chainId in response"
            echo "Response body:"
            cat response.json
            exit 1
          fi
          echo "‚úÖ JSON-RPC Relay request successful"
          echo "Chain ID: $CHAIN_ID"
          cat response.json
        env:
          ECDSA_ACCOUNT_ID: ${{ steps.solo.outputs.ecdsaAccountId }}
          ECDSA_PRIVATE_KEY: ${{ steps.solo.outputs.ecdsaPrivateKey }}
          ECDSA_PUBLIC_KEY: ${{ steps.solo.outputs.ecdsaPublicKey }}
          ED25519_ACCOUNT_ID: ${{ steps.solo.outputs.ed25519AccountId }}
          ED25519_PRIVATE_KEY: ${{ steps.solo.outputs.ed25519PrivateKey }}
          ED25519_PUBLIC_KEY: ${{ steps.solo.outputs.ed25519PublicKey }}
